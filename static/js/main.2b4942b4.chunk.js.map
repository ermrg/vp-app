{"version":3,"sources":["Components/Home.tsx","db/db.ts","db/models/BastiModel.ts","db/models/WardModel.ts","Components/VillageProfile/Forms/GharKoBiabarn.tsx","Components/VillageProfile/AddNewData.tsx","Components/VillageProfile/PendingData.tsx","db/models/CollectorModel.ts","Components/VillageProfileHome.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Home","className","to","db","users","wards","bastis","collectors","version","stores","open","then","a","console","log","catch","err","Dexie","getBastiByWardId","wardId","where","parseInt","toArray","getAllWards","transaction","GharKoBiabarn","props","data","useState","setWards","setBastis","useEffect","loadAllWada","loadBastiByWadaId","e","target","value","id","onChange","map","w","key","type","name","b","AddNewData","PendingData","getAllcollector","collector","getCollectorByPhoneAndPassword","phone","password","first","cookies","Cookies","initialAuth","VillageProfileHome","auth","setAuth","loading","setLoading","error","setError","checkInCookies","loadAllCollectors","handleValueChance","persist","handleSubmit","preventDefault","setInCookies","get","colelctor","set","onClick","remove","method","onSubmit","placeholder","required","style","color","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2b4942b4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Home() {\n  return (\n    <div className=\"home\">\n      <div>\n        <div className=\"title\">\n          <h3>खाँडादेवी गाउँपालिका</h3>\n          <p>माकादुम , रामेछाप, प्रदेश नं ३</p>\n        </div>\n        <Link to=\"/vp-app/app\">Village Profile App</Link>\n      </div>\n    </div>\n  );\n}\n","import Dexie from \"dexie\";\nimport { IBasti } from \"./models/BastiModel\";\nimport { ICollector } from \"./models/CollectorModel\";\nimport { IUser } from \"./models/UserModel\";\nimport { IWard } from \"./models/WardModel\";\nimport { syncDb } from \"./seed\";\n\nexport class AppDatabase extends Dexie {\n  users: Dexie.Table<IUser>;\n  wards: Dexie.Table<IWard>;\n  bastis: Dexie.Table<IBasti>;\n  collectors: Dexie.Table<ICollector>;\n\n  constructor() {\n    super(\"VPDB\");\n\n    var db = this;\n    // db.delete()\n    //   .then(() => {\n    //     console.log(\"Database successfully deleted\");\n    //   })\n    //   .catch((err) => {\n    //     console.error(\"Could not delete database\");\n    //   })\n    //   .finally(() => {\n    //     // Do what should be done next...\n    //   });\n    db.version(1).stores({\n      users: \"++id, name, phone, password\",\n      wards: \"id, name, status\",\n      bastis: \"id, name, status, wardId\",\n      collectors: \"id, name, phone, password\",\n    });\n    db.open()\n      .then(async function (db) {\n        console.log(\"DB opened Succefully\");\n        // await syncDb();\n        console.log(\"Sync Complete\");\n      })\n      .catch(function (err) {\n        console.log(\"DB error\", err);\n      });\n  }\n}\nexport var db = new AppDatabase();\n","import { db } from \"../db\";\n\nexport interface IBasti {\n  id?: number;\n  name: string;\n  status: number;\n  wardId: number;\n}\nexport class Basti {\n  id: number;\n  name: string;\n  status: number;\n  wardId: number;\n\n  constructor(name: string, status: number, wardId: number, id?: number) {\n    this.name = name;\n    this.status = status;\n    this.wardId = wardId;\n    if (id) this.id = id;\n    db.bastis.mapToClass(Basti);\n  }\n  save() {\n    return db.bastis.put(this);\n  }\n}\n\nexport async function addNewBasti(data: IBasti) {\n  await db.transaction(\"rw\", db.bastis, async function () {\n    await db.bastis.add(\n      new Basti(data.name, data.status, data.wardId, data.id)\n    );\n  });\n}\n\nexport async function getAllBasti() {\n  return await db.transaction(\"r\", db.bastis, async function () {\n    let bastis = await db.bastis.toArray();\n    return bastis;\n  });\n}\n\nexport async function getBastiById(id: number) {\n  return await db.bastis.get(id);\n}\n\nexport async function getBastiByName(name: string) {\n  return await db.bastis.where('name').startsWithAnyOfIgnoreCase(name).toArray();\n}\n\nexport async function getBastiByWardId(wardId: any) {\n  return await db.bastis.where({wardId: parseInt(wardId)}).toArray();\n}\n\nexport async function updateBasti(data: IBasti) {\n  return await db.bastis.put({\n    id: data.id,\n    name: data.name,\n    status: data.status,\n    wardId: data.wardId,\n  });\n}\n","import { db } from \"../db\";\n\nexport interface IWard {\n  id?: number;\n  name: string;\n  status: number;\n}\nexport class Ward {\n  id: number;\n  name: string;\n  status: number;\n\n  constructor(name: string, status: number, id?: number) {\n    this.name = name;\n    this.status = status;\n    if (id) this.id = id;\n    db.wards.mapToClass(Ward);\n  }\n  save() {\n    return db.wards.put(this);\n  }\n}\n\nexport async function addNewWard(data: IWard) {\n  await db.transaction(\"rw\", db.wards, async function () {\n    let ward = await db.wards.add(\n      new Ward(data.name, data.status, data.id)\n    );\n    console.log(ward);\n  });\n}\n\nexport async function getAllWards() {\n  return await db.transaction(\"r\", db.wards, async function () {\n    let wards = await db.wards.toArray();\n    return wards;\n  });\n}\n\nexport async function getWardById(id: number) {\n  return await db.wards.get(id);\n}\n\nexport async function getWardByName(name: string) {\n  return await db.wards.where('name').startsWithAnyOfIgnoreCase(name).toArray();\n}\n\nexport async function updateWard(data: IWard) {\n  return await db.wards.put({\n    id: data.id,\n    name: data.name,\n    status: data.status,\n  });\n}\n","import React, { useEffect, useState } from \"react\";\nimport { getAllBasti, getBastiByWardId, IBasti } from \"../../../db/models/BastiModel\";\nimport { getAllWards, IWard } from \"../../../db/models/WardModel\";\n\nexport default function GharKoBiabarn(props: any) {\n  let { data } = props;\n  const [wards, setWards] = useState([] as IWard[]);\n  const [bastis, setBastis] = useState([] as IBasti[]);\n  useEffect(() => {\n    loadAllWada();\n  }, []);\n  async function loadAllWada() {\n    let wards = await getAllWards();\n    setWards([...wards]);\n  }\n  const loadBastiByWadaId = async (e: any) => {\n    let wardId = e.target.value;\n    let bastis = await getBastiByWardId(wardId);\n    setBastis([...bastis])\n  };\n  return (\n    <div className=\"vp-form\">\n      <div className=\"form-group\" id=\"1\">\n        <label className=\"label\">1. Ward No</label>\n        <div className=\"options-verical\" onChange={loadBastiByWadaId}>\n          {wards.map((w, key) => (\n            <div className=\"radio\" key={key}>\n              <label>\n                <input type=\"radio\" value={w.id} name=\"ward_no\" />\n                {w.name}\n              </label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"form-group\" id=\"2\">\n        <label className=\"label\">2. Basti ko Naam</label>\n        <div className=\"options-verical\">\n        {bastis.map((b, key) => (\n            <div className=\"radio\" key={key}>\n              <label>\n                <input type=\"radio\" value={b.id} name=\"basti\" />\n                {b.name}\n              </label>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GharKoBiabarn from \"./Forms/GharKoBiabarn\";\n\nexport default function AddNewData(props: any) {\n  let { data } = props;\n  return (\n    <div className=\"vp-form-wrapper\">\n      <GharKoBiabarn data/>\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function PendingData() {\n    return (\n        <div>\n            Pending Data Here\n        </div>\n    )\n}\n","import { db } from \"../db\";\n\nexport interface ICollector {\n  id?: number;\n  name: string;\n  phone: string;\n  password: string;\n}\nexport class Collector {\n  id: number;\n  name: string;\n  phone: string;\n  password: string;\n\n  constructor(name: string, phone: string, password: string, id?: number) {\n    this.name = name;\n    this.phone = phone;\n    this.password = password;\n    if (id) this.id = id;\n    db.collectors.mapToClass(Collector);\n  }\n  save() {\n    return db.collectors.put(this);\n  }\n}\n\nexport async function addNewCollector(data: ICollector) {\n  await db.transaction(\"rw\", db.collectors, async function () {\n    await db.collectors.add(\n      new Collector(data.name, data.phone, data.password, data.id)\n    );\n  });\n}\n\nexport async function getAllcollector() {\n  return await db.transaction(\"r\", db.collectors, async function () {\n    let collector = await db.collectors.toArray();\n    return collector;\n  });\n}\n\nexport async function getCollectorById(id: number) {\n  return await db.collectors.get(id);\n}\n\nexport async function getCollectorByName(name: string) {\n  return await db.collectors\n    .where(\"name\")\n    .startsWithAnyOfIgnoreCase(name)\n    .toArray();\n}\n\nexport async function getCollectorByPhone(phone: string) {\n  return await db.collectors\n    .where(\"phone\")\n    .startsWithAnyOfIgnoreCase(phone)\n    .toArray();\n}\n\nexport async function getCollectorByPhoneAndPassword(\n  phone: string,\n  password: string\n) {\n  return await db.collectors\n    .where({ phone: phone, password: password }).first();\n}\n\nexport async function updateCollector(data: ICollector) {\n  return await db.collectors.put({\n    id: data.id,\n    name: data.name,\n    phone: data.phone,\n    password: data.password,\n  });\n}\n","import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  getAllcollector,\n  getCollectorByPhoneAndPassword,\n} from \"../db/models/CollectorModel\";\nimport Cookies from \"universal-cookie\";\nimport { IUser } from \"../db/models/UserModel\";\n\nconst cookies = new Cookies();\nconst initialAuth = {\n  name: \"\",\n  phone: \"\",\n  password: \"\",\n} as IUser;\nexport default function VillageProfileHome() {\n  const [auth, setAuth] = useState(initialAuth as IUser);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    checkInCookies();\n    loadAllCollectors()\n  }, []);\n  // async function syncDbWithServer() {\n  //   if (window.navigator.onLine) {\n  //     setLoading(true);\n  //     syncDb();\n  //     setLoading(false);\n  //   }\n  // }\n  // async function createUser(data: IUser) {\n  //   await addNewUser(data);\n  // }\n\n  // async function getUsers() {\n  //   let users = await getAllUsers();\n  //   console.log(users);\n  // }\n\n  // async function getById(id: number) {\n  //   let user = await getUserById(id);\n  //   console.log(user);\n  // }\n\n  // async function updateUserModel(data: IUser) {\n  //   let user = await updateUser(data);\n  //   console.log(user);\n  // }\n\n  async function loadAllCollectors() {\n    let wards = await getAllcollector();\n    console.log(wards);\n  }\n\n  const handleValueChance = (e: any) => {\n    e.persist();\n    setAuth((auth) => ({\n      ...auth,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    setLoading(true);\n    let collector = await getCollectorByPhoneAndPassword(\n      auth.phone,\n      auth.password\n    );\n    if (collector) {\n      setAuth((auth) => ({\n        ...auth,\n        id: collector?.id ? collector?.id : initialAuth.id,\n        name: collector?.name ? collector?.name : '',\n        phone: collector?.phone ? collector?.phone : initialAuth.phone,\n      }));\n      setInCookies(collector);\n    } else {\n      setError(\"Phone or Password did not match!\");\n    }\n    setLoading(false);\n  };\n\n  const checkInCookies = () => {\n    let auth = cookies.get(\"auth\");\n    if (auth) {\n      setAuth({ ...auth });\n    }\n  };\n  const setInCookies = (colelctor: IUser) => {\n    cookies.set(\"auth\", colelctor);\n  };\n  const clearCookies = () => {\n    cookies.remove(\"auth\");\n  };\n\n  const logout = () => {\n    setAuth({ ...initialAuth });\n    clearCookies();\n  };\n\n  if (loading) {\n    return <div className=\"vp-home\">Loading...</div>;\n  }\n  if (!auth.id) {\n    return (\n      <div className=\"vp-home\">\n        <form method=\"post\" onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label>Phone</label>\n            <input\n              type=\"number\"\n              placeholder=\"Phone No\"\n              name=\"phone\"\n              value={auth?.phone}\n              onChange={handleValueChance}\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Password</label>\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              name=\"password\"\n              value={auth?.password}\n              onChange={handleValueChance}\n              required\n            />\n          </div>\n          <p style={{ color: \"red\" }}>{error}</p>\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"vp-home\">\n      <div className=\"welcome\">\n        Welcome <br />\n        {auth?.name}\n        <p className=\"logout\" onClick={logout}>Logout</p>\n      </div>\n      <Link to=\"/vp-app/app/add-new\">Add New Household</Link>\n      <Link to=\"/vp-app/app/pending\">Pending Data</Link>\n      <Link to=\"/vp-app/app/incomplete\">Incomplete Data</Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Home from \"./Components/Home\";\nimport AddNewData from \"./Components/VillageProfile/AddNewData\";\nimport PendingData from \"./Components/VillageProfile/PendingData\";\nimport VillageProfileHome from \"./Components/VillageProfileHome\";\nimport \"./App.css\"\nimport { db } from \"./db/db\";\n\nexport default function App() {\n  db.open();\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/vp-app/app/add-new\">\n          <AddNewData />\n        </Route>\n        <Route path=\"/vp-app/app/pending\">\n          <PendingData />\n        </Route>\n        <Route path=\"/vp-app/app\">\n          <VillageProfileHome />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/vp-app\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}